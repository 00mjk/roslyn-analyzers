//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Desktop.Analyzers {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DesktopAnalyzersResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DesktopAnalyzersResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Desktop.Analyzers.DesktopAnalyzersResources", typeof(DesktopAnalyzersResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not catch corrupted state exceptions in general handlers..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptions {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not author general catch handlers in code that receives corrupted state exceptions. Code that receives and intends to handle corrupted state exceptions should author distinct handlers for each exception type..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsDescription {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify {0} to catch and handle a more specific set of exception type(s) than {1} or rethrow the exception. .
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsMessage {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string DoNotUseDtdProcessingOverloadsDescription {
            get {
                return ResourceManager.GetString("DoNotUseDtdProcessingOverloadsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use unsafe overload of &apos;{0}&apos; method, replace with an overload that takes an XmlReader instance..
        /// </summary>
        internal static string DoNotUseDtdProcessingOverloadsDiagnosis {
            get {
                return ResourceManager.GetString("DoNotUseDtdProcessingOverloadsDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting the InnerXml property of XmlDocument is potentially unsafe. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string DoNotUseSetInnerXmlDescription {
            get {
                return ResourceManager.GetString("DoNotUseSetInnerXmlDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use the unsafe setter of InnerXml property of System.Xml.XmlDocument, replace with a call to the Load() method overload that takes an XmlReader instance..
        /// </summary>
        internal static string DoNotUseSetInnerXmlDiagnosis {
            get {
                return ResourceManager.GetString("DoNotUseSetInnerXmlDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insecure DTD processing in API design..
        /// </summary>
        internal static string InsecureDtdProcessingInApiDesign {
            get {
                return ResourceManager.GetString("InsecureDtdProcessingInApiDesign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insecure DTD processing in XML.
        /// </summary>
        internal static string InsecureXmlDtdProcessing {
            get {
                return ResourceManager.GetString("InsecureXmlDtdProcessing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insecure XSLT script processing..
        /// </summary>
        internal static string InsecureXsltScriptProcessing {
            get {
                return ResourceManager.GetString("InsecureXsltScriptProcessing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Providing an insecure XsltSettings instance and an insecure XmlResolver instance to XslCompiledTransform.Load method is potentially unsafe as it allows processing script within XSL, which, on untrusted XSL input, may lead to malicious code execution. Either replace the insecure XsltSettings argument with XsltSettings.Default or an instance that has disabled document function and script execution, or replace the XmlResolver argurment with null or an XmlSecureResolver instance. This message may be suppressed  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InsecureXsltScriptProcessingDescription {
            get {
                return ResourceManager.GetString("InsecureXsltScriptProcessingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure that  DTD processing is secure on all instances of classes derived from System.Xml.XmlDocument by explicitly setting XmlResolver property to a secure value (instance of XmlSecureResolver or null). Using default resolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string MakeDtdProcessingSecureInApiDesignXmlDocumentDescription {
            get {
                return ResourceManager.GetString("MakeDtdProcessingSecureInApiDesignXmlDocumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure that  DTD processing is secure on all instances of classes derived from System.Xml.XmlTextReader by setting XmlResolver and DtdProcessing properties to secure values. Enable DTD processing on the XmlTextReader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string MakeDtdProcessingSecureInApiDesignXmlTextReaderDescription {
            get {
                return ResourceManager.GetString("MakeDtdProcessingSecureInApiDesignXmlTextReaderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review code to insure that the property is set from a trusted source. This pattern internally enables DTD processing in XML and uses XmlUrlResolver for resolving external XML entities, which, on untrusted input, may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string ReviewDtdProcessingPropertiesDescription {
            get {
                return ResourceManager.GetString("ReviewDtdProcessingPropertiesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure DataViewSettingCollectionString property of DataViewManager is assigned from a trusted source, otherwise avoid using this control..
        /// </summary>
        internal static string ReviewDtdProcessingPropertiesDiagnosis {
            get {
                return ResourceManager.GetString("ReviewDtdProcessingPropertiesDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor of XmlDocument derived class implicitly uses insecure default value for DTD processing..
        /// </summary>
        internal static string XmlDocumentDerivedClassConstructorNoSecureXmlResolverDiagnosis {
            get {
                return ResourceManager.GetString("XmlDocumentDerivedClassConstructorNoSecureXmlResolverDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlDocument derived class doesn&apos;t explictily define a constructor, therefore enables insecure DTD processing by default..
        /// </summary>
        internal static string XmlDocumentDerivedClassNoConstructorDiagnosis {
            get {
                return ResourceManager.GetString("XmlDocumentDerivedClassNoConstructorDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method of XmlDocument derived class sets XmlResolver property to an insecure value..
        /// </summary>
        internal static string XmlDocumentDerivedClassSetInsecureXmlResolverInMethodDiagnosis {
            get {
                return ResourceManager.GetString("XmlDocumentDerivedClassSetInsecureXmlResolverInMethodDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Ensure to set the XmlResolver property to null or an instance of XmlSecureResolver when processing untrusted input. Using insecure resolver (including the dafault resolver) for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector..
        /// </summary>
        internal static string XmlDocumentUseSecureResolverDescription {
            get {
                return ResourceManager.GetString("XmlDocumentUseSecureResolverDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An XmlDocument instance is created without setting its XmlResolver property to a secure value. .
        /// </summary>
        internal static string XmlDocumentWithNoSecureResolverDiagnosis {
            get {
                return ResourceManager.GetString("XmlDocumentWithNoSecureResolverDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An insecure XmlReaderSettings instance is provided to XmlReader.Create method..
        /// </summary>
        internal static string XmlReaderCreateInsecureConstructedDiagnosis {
            get {
                return ResourceManager.GetString("XmlReaderCreateInsecureConstructedDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoking XmlReader.Create method without providing a secure XmlReaderSettings instance is potentially unsafe as it enables DTD processing and uses XmlUrlResolver for resolving external XML entities, which, on untrusted input, may lead to information disclosure.  Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector. Ensure the XmlReaderSettings instance is secure by settings DtdProcessing property to fa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string XmlReaderCreateInsecureDescription {
            get {
                return ResourceManager.GetString("XmlReaderCreateInsecureDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A potentially insecure XmlReaderSettings instance is provided to XmlReader.Create method. Consider explicitly setting secure values to the instance at call site..
        /// </summary>
        internal static string XmlReaderCreateInsecureInputDiagnosis {
            get {
                return ResourceManager.GetString("XmlReaderCreateInsecureInputDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use an insecure overload of XmlReader.Create which does not accept an XmlReaderSettings argument..
        /// </summary>
        internal static string XmlReaderCreateWrongOverloadDiagnosis {
            get {
                return ResourceManager.GetString("XmlReaderCreateWrongOverloadDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create XmlTextReader instance with insecure default settings..
        /// </summary>
        internal static string XmlTextReaderConstructedWithNoSecureResolutionDiagnosis {
            get {
                return ResourceManager.GetString("XmlTextReaderConstructedWithNoSecureResolutionDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor of XmlTextReader derived class uses insecure default values for DTD processing..
        /// </summary>
        internal static string XmlTextReaderDerivedClassConstructorNoSecureSettingsDiagnosis {
            get {
                return ResourceManager.GetString("XmlTextReaderDerivedClassConstructorNoSecureSettingsDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlTextReader derived class doesn&apos;t explictily define a constructor..
        /// </summary>
        internal static string XmlTextReaderDerivedClassNoConstructorDiagnosis {
            get {
                return ResourceManager.GetString("XmlTextReaderDerivedClassNoConstructorDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method of XmlTextReader derived class sets XmlResolver and/or DtdProcessing property to insecure value..
        /// </summary>
        internal static string XmlTextReaderDerivedClassSetInsecureSettingsInMethodDiagnosis {
            get {
                return ResourceManager.GetString("XmlTextReaderDerivedClassSetInsecureSettingsInMethodDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating an XmlTextReader instance without disabling DTD processing  and using a secure resolver for resolving external XML entities may lead to information disclosure on untrusted input. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector. Ensure the DtdProcessing property to false and XmlResolver proeprty to a secure resolver (XmlSecureResolver or null), or use XmlReader.Create method with a secure  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string XmlTextReaderInsecureResolutionDescription {
            get {
                return ResourceManager.GetString("XmlTextReaderInsecureResolutionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not set XmlTextReader instance with insecure values..
        /// </summary>
        internal static string XmlTextReaderSetInsecureResolutionDiagnosis {
            get {
                return ResourceManager.GetString("XmlTextReaderSetInsecureResolutionDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments. .
        /// </summary>
        internal static string XslCompiledTransformLoadInsecureConstructedDiagnosis {
            get {
                return ResourceManager.GetString("XslCompiledTransformLoadInsecureConstructedDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A potentially insecure XsltSettings instance and an insecure XmlResolver instance are provided to XslCompiledTransform.Load as arguments. To avoid false alarm, consider creating a secure XsltSettings instance at the call site..
        /// </summary>
        internal static string XslCompiledTransformLoadInsecureInputDiagnosis {
            get {
                return ResourceManager.GetString("XslCompiledTransformLoadInsecureInputDiagnosis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm DES..
        /// </summary>
        internal static string DoNotUseDES {
            get {
                return ResourceManager.GetString("DoNotUseDES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements DES, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseDESDescription {
            get {
                return ResourceManager.GetString("DoNotUseDESDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm DSA..
        /// </summary>
        internal static string DoNotUseDSA {
            get {
                return ResourceManager.GetString("DoNotUseDSA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements DSA, a cryptographically insecure signature-creation mechanism. Replace this usage with RSA or Diffie-Hellman with a key length greater than or equal to 2048-bits, or ECDSA or ECDH with a key length greater than or equal 256 bits..
        /// </summary>
        internal static string DoNotUseDSADescription {
            get {
                return ResourceManager.GetString("DoNotUseDSADescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm MD5..
        /// </summary>
        internal static string DoNotUseMD5 {
            get {
                return ResourceManager.GetString("DoNotUseMD5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements MD5, a cryptographically insecure hashing function. Hash collisions are computationally feasible for the MD5 and HMACMD5 algorithms. Replace this usage with a SHA-2 family hash algorithm (SHA512, SHA384, SHA256)..
        /// </summary>
        internal static string DoNotUseMD5Description {
            get {
                return ResourceManager.GetString("DoNotUseMD5Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm RC2..
        /// </summary>
        internal static string DoNotUseRC2 {
            get {
                return ResourceManager.GetString("DoNotUseRC2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements RC2, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseRC2Description {
            get {
                return ResourceManager.GetString("DoNotUseRC2Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm Rijndael..
        /// </summary>
        internal static string DoNotUseRijndael {
            get {
                return ResourceManager.GetString("DoNotUseRijndael", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements Rijndael, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseRijndaelDescription {
            get {
                return ResourceManager.GetString("DoNotUseRijndaelDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm RIPEMD160..
        /// </summary>
        internal static string DoNotUseRIPEMD160 {
            get {
                return ResourceManager.GetString("DoNotUseRIPEMD160", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements RIPEMD160, a cryptographically insecure hashing function. Hash collisions are computationally feasible for the RIPEMD hash algorithms. Replace this usage with a SHA-2 family hash algorithm (SHA512, SHA384, SHA256)..
        /// </summary>
        internal static string DoNotUseRIPEMD160Description {
            get {
                return ResourceManager.GetString("DoNotUseRIPEMD160Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm TripleDES..
        /// </summary>
        internal static string DoNotUseTripleDES {
            get {
                return ResourceManager.GetString("DoNotUseTripleDES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements TripleDES, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseTripleDESDescription {
            get {
                return ResourceManager.GetString("DoNotUseTripleDESDescription", resourceCulture);
            }
        }
    }
}
