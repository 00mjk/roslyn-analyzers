//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Desktop.Analyzers {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DesktopAnalyzersResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DesktopAnalyzersResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Desktop.Analyzers.DesktopAnalyzersResources", typeof(DesktopAnalyzersResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not catch corrupted state exceptions in general handlers..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptions {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not author general catch handlers in code that receives corrupted state exceptions. Code that receives and intends to handle corrupted state exceptions should author distinct handlers for each exception type..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsDescription {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify {0} to catch and handle a more specific set of exception type(s) than {1} or rethrow the exception. .
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsMessage {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm DES..
        /// </summary>
        internal static string DoNotUseDES {
            get {
                return ResourceManager.GetString("DoNotUseDES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements DES, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseDESDescription {
            get {
                return ResourceManager.GetString("DoNotUseDESDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm DSA..
        /// </summary>
        internal static string DoNotUseDSA {
            get {
                return ResourceManager.GetString("DoNotUseDSA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements DSA, a cryptographically insecure signature-creation mechanism. Replace this usage with RSA or Diffie-Hellman with a key length greater than or equal to 2048-bits, or ECDSA or ECDH with a key length greater than or equal 256 bits..
        /// </summary>
        internal static string DoNotUseDSADescription {
            get {
                return ResourceManager.GetString("DoNotUseDSADescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm MD5..
        /// </summary>
        internal static string DoNotUseMD5 {
            get {
                return ResourceManager.GetString("DoNotUseMD5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements MD5, a cryptographically insecure hashing function. Hash collisions are computationally feasible for the MD5 and HMACMD5 algorithms. Replace this usage with a SHA-2 family hash algorithm (SHA512, SHA384, SHA256)..
        /// </summary>
        internal static string DoNotUseMD5Description {
            get {
                return ResourceManager.GetString("DoNotUseMD5Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm RC2..
        /// </summary>
        internal static string DoNotUseRC2 {
            get {
                return ResourceManager.GetString("DoNotUseRC2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements RC2, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseRC2Description {
            get {
                return ResourceManager.GetString("DoNotUseRC2Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm Rijndael..
        /// </summary>
        internal static string DoNotUseRijndael {
            get {
                return ResourceManager.GetString("DoNotUseRijndael", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements Rijndael, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseRijndaelDescription {
            get {
                return ResourceManager.GetString("DoNotUseRijndaelDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm RIPEMD160..
        /// </summary>
        internal static string DoNotUseRIPEMD160 {
            get {
                return ResourceManager.GetString("DoNotUseRIPEMD160", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements RIPEMD160, a cryptographically insecure hashing function. Hash collisions are computationally feasible for the RIPEMD hash algorithms. Replace this usage with a SHA-2 family hash algorithm (SHA512, SHA384, SHA256)..
        /// </summary>
        internal static string DoNotUseRIPEMD160Description {
            get {
                return ResourceManager.GetString("DoNotUseRIPEMD160Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm SHA1..
        /// </summary>
        internal static string DoNotUseSHA1 {
            get {
                return ResourceManager.GetString("DoNotUseSHA1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements SHA1, a cryptographically insecure hashing function. Hash collisions are computationally feasible for the SHA-1 and SHA-0 algorithms. Replace this usage with a SHA-2 family hash algorithm (SHA512, SHA384, SHA256)..
        /// </summary>
        internal static string DoNotUseSHA1Description {
            get {
                return ResourceManager.GetString("DoNotUseSHA1Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use insecure cryptographic algorithm TripleDES..
        /// </summary>
        internal static string DoNotUseTripleDES {
            get {
                return ResourceManager.GetString("DoNotUseTripleDES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type implements TripleDES, a cryptographically insecure encryption algorithm. Replace this usage with an AES encryption algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits..
        /// </summary>
        internal static string DoNotUseTripleDESDescription {
            get {
                return ResourceManager.GetString("DoNotUseTripleDESDescription", resourceCulture);
            }
        }
    }
}
